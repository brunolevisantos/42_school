LINKS UTEIS:

	https://www.youtube.com/watch?v=6u_iPGVkfZ4&list=PLfqABt5AS4FkW5mOn2Tn9ZZLLDwA3kZUY&index=7

	execv
	https://www.youtube.com/watch?v=OVFEWSP7n8c&list=PLfqABt5AS4FkW5mOn2Tn9ZZLLDwA3kZUY&index=15
	exec 'V' stands for a vector, whereas it should receive a vector (char **)
	exec arguments must end with a null
	'E' stands for enviornment
	https://www.youtube.com/watch?v=iq7puCxsgHQ

	dup && dup2
	https://www.youtube.com/watch?v=5fnVr-zH-SE

	./pipex file1 cmd1 cmd2 file2
	
	./pipex infile "ls -l" "wc -l" "bla -sd" "jksdf -12" outfile 
	

	trocaro argv para path
	main pipex
		ver numeros de arguments
		fd = open(file1)
		(copiar file1 com dup)
		ver path cmd
		ler av[2] e fazer o que e preciso no "dup - file1" (onde encontrar o que e preciso fazer?) (usar execve para executar no "dup - file1" o cmd1??)
			fazer isto tudo num fork, porque execve para o outro programa.
			(mandar o resultado para um ** que esteja no parent process com pipe)
			voltar a fazer um fork, usar novo execve e fazer o cmd2 no **	
				fazer um pipe e mandar o resultado para o file2 que esteja no parent process


./pipex file1.txt results.txt

		while (i < argc - 1)
		{
			pid = fork();
			if (pid == -1)
				perror ("fork");
			else if (pid == 0)
			{
				path = check_access(get_path(envp), argv[i]);
				fd[0] = open(argv[1], O_RDONLY);
				fd[1] = open(argv[argc - 1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
				dup2(fd[1], 1);
				if (execve(path, argVec, envp) == -1)
					perror("could not execute\n");
				// free(path);
			}
		}
